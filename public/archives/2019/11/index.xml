<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019/11 on すいすいSwift</title>
    <link>https://swiswiswift.com/archives/2019/11/</link>
    <description>Recent content in 2019/11 on すいすいSwift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 22 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://swiswiswift.com/archives/2019/11/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerを使ってPostgreSQLを立て、テーブルを作成する。</title>
      <link>https://swiswiswift.com/2019-11-22/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-22/</guid>
      <description>Docker を使って PostgreSQL を立てる方法です。 開発環境を Docker をで立てて整備すると自分のローカル環境を汚さずに済むのでとても良いですよね。 postgres-Docker Hub 以下のコマンドで、ローカルの 5432ポートに postgres11 を立てることができ、kabigon というユーザーでログインすることができます。（パスワードはpassword） また pokemon というデータベー</description>
    </item>
    
    <item>
      <title>TabViewを使って画面を切り替える（SwiftUI）</title>
      <link>https://swiswiswift.com/2019-11-21/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-21/</guid>
      <description>TabViewを使って画面を切り替えるサンプルです。 TabView - SwiftUI | Apple Developer Documentation (adsbygoogle = window.adsbygoogle || []).push({}); amzn_assoc_ad_type =&#34;responsive_search_widget&#34;; amzn_assoc_tracking_id =&#34;swiswiswift-22&#34;; amzn_assoc_marketplace =&#34;amazon&#34;; amzn_assoc_region =&#34;JP&#34;; amzn_assoc_placement =&#34;&#34;; amzn_assoc_search_type = &#34;search_widget&#34;;amzn_assoc_width =&#34;auto&#34;; amzn_assoc_height =&#34;auto&#34;; amzn_assoc_default_search_category =&#34;&#34;; amzn_assoc_default_search_key =&#34;&#34;;amzn_assoc_theme =&#34;light&#34;; amzn_assoc_bg_color =&#34;FFFFFF&#34;;</description>
    </item>
    
    <item>
      <title>ListViewからそれぞれ別のViewに遷移する（SwiftUI）</title>
      <link>https://swiswiswift.com/2019-11-20/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-20/</guid>
      <description>設定画面のようにListViewからそれぞれ別のViewに遷移する方法が少し手間でした。 もっと良い方法がある気がします。。。 (adsbygoogle = window.adsbygoogle || []).push({}); amzn_assoc_ad_type =&#34;responsive_search_widget&#34;; amzn_assoc_tracking_id =&#34;swiswiswift-22&#34;; amzn_assoc_marketplace =&#34;amazon&#34;; amzn_assoc_region =&#34;JP&#34;; amzn_assoc_placement =&#34;&#34;; amzn_assoc_search_type = &#34;search_widget&#34;;amzn_assoc_width =&#34;auto&#34;; amzn_assoc_height =&#34;auto&#34;; amzn_assoc_default_search_category =&#34;&#34;; amzn_assoc_default_search_key =&#34;&#34;;amzn_assoc_theme =&#34;light&#34;; amzn_assoc_bg_color =&#34;FFFFFF&#34;;</description>
    </item>
    
    <item>
      <title>Alamofireで受け取ったJsonをCodableを使ってパースする</title>
      <link>https://swiswiswift.com/2019-11-19/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-19/</guid>
      <description>お天気Webサービス（Livedoor Weather Web Service） の API を Alamofire から叩き、帰ってきた JSON を struct にパースする方法です。 (adsbygoogle = window.adsbygoogle || []).push({});</description>
    </item>
    
    <item>
      <title>SwiftUIでStructが使いまわされる</title>
      <link>https://swiswiswift.com/2019-11-14/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-14/</guid>
      <description>画面遷移をするたびに異なる ID を表示させたかったのですが、それができませんでした。（毎回同じ ID が表示される） onDisappear で id を再生成することで回避しました。 @State に変化が無い場合はキャッシュを使い回したりするということでしょうか？ 勉強していきます！！ (adsbygoogle = window.adsbygoogle || []).push({});</description>
    </item>
    
    <item>
      <title>SwiftUIでListを表示する</title>
      <link>https://swiswiswift.com/2019-11-13/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-13/</guid>
      <description>SwiftUI でList を表示する方法です。 (adsbygoogle = window.adsbygoogle || []).push({});</description>
    </item>
    
    <item>
      <title>インフラエンジニアなりたてで知らなかった単語をまとめ</title>
      <link>https://swiswiswift.com/2019-11-08/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-08/</guid>
      <description>インフラの勉強をし始めて分からなくて調べた単語をまとめました。 (adsbygoogle = window.adsbygoogle || []).push({}); コンソリデーティッドビリング（Consolidated Billing） 一括請求機能。AWS Organizations で利用することができ、組織の連結アカウントのすべての料金を支払者アカウントに一括請求することができる。連結アカウントのコストを追跡するこ</description>
    </item>
    
    <item>
      <title>PHP で本当に簡単なモックサーバーを作る</title>
      <link>https://swiswiswift.com/2019-11-07/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-07/</guid>
      <description>ローカルにモックサーバーが必要だったので簡単なものをPHPで作ってみました。 signup.php でユーザー登録を行い、list.php でユーザーの一覧を表示し、deleate.php でユーザーを全て削除します。 (adsbygoogle = window.adsbygoogle || []).push({}); # サーバー起動 $ php -S localhost:8000 # ユーザー登録 $ curl http://localhost:8000/signup.php -X POST -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;onojun&amp;#34;, &amp;#34;age&amp;#34;:24}&amp;#39; # ユーザー一覧 $ curl http://localhost:8000/list.php # 全てのユーザーを削</description>
    </item>
    
    <item>
      <title>cURL（curl）でアプリにプッシュ通知を送信する</title>
      <link>https://swiswiswift.com/2019-11-06/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-06/</guid>
      <description>curl コマンドで iOS端末にプッシュ通知を送信する方法です。 (adsbygoogle = window.adsbygoogle || []).push({}); 証明書と秘密鍵の両方を含めたpemファイルを作成します。 $ openssl pkcs12 -in xxxx.p12 -nodes -out certificate-and-privatekey.pem curl コマンドでプッシュ通知を送信します。 プッシュペイロード、トピック、デバイストークンは使用している環境のものを使ってください。 また、本番環境（テストフライトなど）</description>
    </item>
    
    <item>
      <title>p12ファイルから証明書と秘密鍵を取り出す</title>
      <link>https://swiswiswift.com/2019-11-05/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-05/</guid>
      <description>.p12 ファイルから証明書と秘密鍵を取り出す方法です。 AWS SNS を Terraform で書くときに必要でした。 $ openssl pkcs12 -in xxxx.p12 -nodes -nokeys -out certificate.pem $ openssl pkcs12 -in xxxx.p12 -nodes -nocerts -out privatekey.oem (adsbygoogle = window.adsbygoogle || []).push({}); ただ、この方法では、ファイルの先頭に NoArgument から始まるテキストが入ってしまいます。 NoArgument が入っても悪さはしないのですが、気になったので消そうとしました。 以下のコマンドを実行すると秘密鍵</description>
    </item>
    
  </channel>
</rss>