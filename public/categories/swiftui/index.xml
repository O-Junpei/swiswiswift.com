<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftUI on すいすいSwift</title>
    <link>https://swiswiswift.com/categories/swiftui/</link>
    <description>Recent content in SwiftUI on すいすいSwift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 14 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://swiswiswift.com/categories/swiftui/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SwiftUIでButton内の画像やテキストの色を変えない</title>
      <link>https://swiswiswift.com/2020-09-14/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-14/</guid>
      <description>SwiftUIでButton内の画像やテキストの色を変えない方法です。 .buttonStyle(PlainButtonStyle()) ではフルーツの一覧を表示して</description>
    </item>
    
    <item>
      <title>SwiftUIで画面遷移時に値を渡す</title>
      <link>https://swiswiswift.com/2020-09-13/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-13/</guid>
      <description>SwiftUIで画面遷移時に値を渡す方法です。 ContentView ではフルーツの一覧を表示しています。 フルーツが表示さ</description>
    </item>
    
    <item>
      <title>GithubのAPIを叩き、SwiftUIでリポジトリを取得する。一番最後までいくと追加で取得しIndicator を表示する</title>
      <link>https://swiswiswift.com/2020-09-12/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-12/</guid>
      <description>GithubのAPIを叩き、リポジトリを取得する。一番最後までいくと追加で取得しIndicator を</description>
    </item>
    
    <item>
      <title>GithubのAPIを叩き、SwiftUIでリポジトリの情報をリストに表示する。一番下までスクロールされたら追加する</title>
      <link>https://swiswiswift.com/2020-09-11/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-11/</guid>
      <description>GithubのAPIを叩き、リポジトリの情報をリストに表示する。一番下までスクロールされたら追加す</description>
    </item>
    
    <item>
      <title>GithubのAPIを叩き、SwiftUIでリポジトリの情報をリストに表示する（Combine）</title>
      <link>https://swiswiswift.com/2020-09-10/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-10/</guid>
      <description>GithubのAPIを叩き、リポジトリの情報をリストに表示する方法です。 Infinite List Scroll with SwiftUI and Combine を参考にさせ</description>
    </item>
    
    <item>
      <title>GithubのAPIを叩き、SwiftUIでリポジトリの情報をリストに表示する（Closure）</title>
      <link>https://swiswiswift.com/2020-09-09/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-09/</guid>
      <description>GithubのAPIを叩き、SwiftUIでリポジトリの情報をリストに表示する方法です。 Infinite List Scroll with SwiftUI</description>
    </item>
    
    <item>
      <title>SwiftUIでViewを横に等間隔で横に並べる</title>
      <link>https://swiswiswift.com/2020-09-08/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-08/</guid>
      <description>SwiftUIでViewを横に等間隔で横に並べて表示するほうほうです。 アイコンを等間隔で表示したりす</description>
    </item>
    
    <item>
      <title>SwiftUIで画像を丸く切り取り、枠を付ける</title>
      <link>https://swiswiswift.com/2020-09-07/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-07/</guid>
      <description>SwiftUIで丸い枠に合わせて画像を丸く切り取り、枠を付ける方法です。 アイコンの表示する箇所などに</description>
    </item>
    
    <item>
      <title>SwiftUIで画像をリサイズして表示（clip）</title>
      <link>https://swiswiswift.com/2020-09-06/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-06/</guid>
      <description>SwiftUIで画像をリサイズして表示します。 アスペクト比が異なる場合ははみ出た箇所を切り取って表示</description>
    </item>
    
    <item>
      <title>SwiftUIで画像をリサイズして表示（fit）</title>
      <link>https://swiswiswift.com/2020-09-05/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-05/</guid>
      <description>SwiftUIで画像をリサイズして表示します。 アスペクト比が異なる場合は余白が赤色で表示されます。 (adsbygoogle</description>
    </item>
    
    <item>
      <title>Buttonを押すとTextの文字が変わる</title>
      <link>https://swiswiswift.com/2020-09-04/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-04/</guid>
      <description>SwiftUIでButtonが押されたら文字の色を変える方法です。 ボタンが押されたタイミングで @State var t</description>
    </item>
    
    <item>
      <title>SwiftUIでアラートとシートを出し分ける</title>
      <link>https://swiswiswift.com/2020-09-03/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-09-03/</guid>
      <description>SwiftUIでアラートとシートを出し分ける方法です。 TextField に入力された文字列が Double に変換できるかチェック</description>
    </item>
    
    <item>
      <title>Xcodeで行を入れ替える</title>
      <link>https://swiswiswift.com/2020-08-08/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-08-08/</guid>
      <description>Xcodeで行を入れ替える方法です。 command + option + [ でカーソルのある行を上に持ってくることができます。 また</description>
    </item>
    
    <item>
      <title>Xcodeでコードをフォーマットする</title>
      <link>https://swiswiswift.com/2020-08-07/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-08-07/</guid>
      <description>Xcodeでコードをフォーマットする方法です。 command + a でコードを全て選択し、control + i でコード</description>
    </item>
    
    <item>
      <title>SwiftUIのTextFieldで編集中と編集完了を検知する</title>
      <link>https://swiswiswift.com/2020-08-06/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-08-06/</guid>
      <description>SwiftUIのTextFieldで編集中と編集完了を検知する方法です。 UIKit よりも少ないコードで実現で</description>
    </item>
    
    <item>
      <title>SwiftUIのPreviewを横向きにする</title>
      <link>https://swiswiswift.com/2020-08-04/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-08-04/</guid>
      <description>SwiftUIのPreviewを横向きにする方法です。 Previewのサイズを変更することで実現しま</description>
    </item>
    
    <item>
      <title>Buttonからプッシュ遷移をする（NavigationLinkを無効にする）</title>
      <link>https://swiswiswift.com/2020-08-03/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-08-03/</guid>
      <description>Buttonからプッシュ遷移をする方法です。 この方法であれば、NavigationLink を擬似的に</description>
    </item>
    
    <item>
      <title>SwiftUIでNavigationBarを隠す</title>
      <link>https://swiswiswift.com/2020-08-02/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-08-02/</guid>
      <description>SwiftUI で NavigationBar を隠す方法です。 .navigationBarHidden(true)を設定すると隠すことができ</description>
    </item>
    
    <item>
      <title>よくあるチュートリアル画面をUIPageViewControllerとSwiftUIで作る</title>
      <link>https://swiswiswift.com/2020-06-28/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-06-28/</guid>
      <description>UIPageViewControllerとSwiftUIでよくあるチュートリアル画面を作ります。 画面</description>
    </item>
    
    <item>
      <title>SwiftUIでUITestを動かす</title>
      <link>https://swiswiswift.com/2020-06-24/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-06-24/</guid>
      <description>SwiftUIでUITestを動かす方法です。 UIKit の時と違って sleep を入れないと良い感じに動かなかったです</description>
    </item>
    
    <item>
      <title>SwiftUIでText中の文字の太さや色を変える</title>
      <link>https://swiswiswift.com/2020-06-22/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-06-22/</guid>
      <description>SwiftUIでText中の文字の太さや色を変える方法です。 SwiftUI で Text を結合できるのが面白いです。 (adsbygoogle = window.adsbygoogle</description>
    </item>
    
    <item>
      <title>SwiftUIで続きを読む。。。ボタンがあるViewを実装する</title>
      <link>https://swiswiswift.com/2020-06-20/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-06-20/</guid>
      <description>SwiftUIで続きを読む。。。ボタンがあるViewを実装する方法です。 背景を透明色にし、そのサイズ</description>
    </item>
    
    <item>
      <title>SwiftUIで閉じることができないモーダルを表示する</title>
      <link>https://swiswiswift.com/2020-06-01/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-06-01/</guid>
      <description>SwiftUIで閉じることができないモーダルを表示する方法です。 以下の記事の応用です、UIKit を使</description>
    </item>
    
    <item>
      <title>シミュレーターのスクリーンショットを影無しで撮影する（ツールバー無しで撮影する）</title>
      <link>https://swiswiswift.com/2020-05-14/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-14/</guid>
      <description>シミュレーターのスクリーンショットを影無しで撮影する（ツールバー無しで撮影する）方法です。 command + shift + 4</description>
    </item>
    
    <item>
      <title>SwiftUIでモーダルからフルモーダルを表示する</title>
      <link>https://swiswiswift.com/2020-05-13/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-13/</guid>
      <description>SwiftUIでモーダルからフルモーダルを表示する方法です。 以下の記事の改良版？です。 SwiftUI</description>
    </item>
    
    <item>
      <title>SwiftUIでアプリ起動時に画面を遷移させる</title>
      <link>https://swiswiswift.com/2020-05-12/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-12/</guid>
      <description>SwiftUIでアプリ起動時に画面を遷移させる方法です。 登録の導線で途中離脱したらその途中から再開さ</description>
    </item>
    
    <item>
      <title>FunctionBuilderを使ってViewに影をつける</title>
      <link>https://swiswiswift.com/2020-05-07/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-07/</guid>
      <description>FunctionBuilderを使ってViewに影をつける方法です。 FunctionBuilderと</description>
    </item>
    
    <item>
      <title>ViewModifierを使ってViewに影をつける</title>
      <link>https://swiswiswift.com/2020-05-06/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-06/</guid>
      <description>ViewModifierを使ってViewに影をつける方法です。 FunctionBuilderとVie</description>
    </item>
    
    <item>
      <title>SwiftUIでフルスクリーンモーダルを表示する</title>
      <link>https://swiswiswift.com/2020-05-05/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-05/</guid>
      <description>SwiftUIでフルスクリーンモーダルを表示する方法です。 SwiftにもっとAPI増えて欲しいです。</description>
    </item>
    
    <item>
      <title>SwiftUIでNavigationViewのタイトルやテーブルビューの背景を変える</title>
      <link>https://swiswiswift.com/2020-05-04/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-04/</guid>
      <description>SwiftUIでNavigationViewのタイトルやテーブルビューの背景を変える方法です。 TableView と UITextView</description>
    </item>
    
    <item>
      <title>SwiftUI で文字列中にタップ可能なリンクを追加する</title>
      <link>https://swiswiswift.com/2020-05-03/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-05-03/</guid>
      <description>SwiftUI で文字列中にタップ可能なリンクを追加するを作成する方法です。 UIViewRepresentable と UITextView を使って実現しました。 Reference: UITe</description>
    </item>
    
    <item>
      <title>SwiftUIでUICollectionViewのようにViewを並べる</title>
      <link>https://swiswiswift.com/2020-02-09/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-02-09/</guid>
      <description>SwiftUI で UICollectionView のように表示する方法です。 Q-Mobile/QGrid というライブラリを使うと簡単です。 QGrid を参考にしながら書いてみました</description>
    </item>
    
    <item>
      <title>SwiftUIでFirestoreの画像を表示する</title>
      <link>https://swiswiswift.com/2020-02-08/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-02-08/</guid>
      <description>SwiftUI で Firestore の画像を表示する方法です。 UIImage は SDWebImage を使えば簡単に表示できますが、SwiftUI ではそれができませ</description>
    </item>
    
    <item>
      <title>SwiftUIのToggleの変更を検知する</title>
      <link>https://swiswiswift.com/2020-02-05/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-02-05/</guid>
      <description>SwiftUIのToggleの変更を検知し、print 文を実行します。 参考: How can I trigger an action when a swiftUI toggle() is toggled?</description>
    </item>
    
    <item>
      <title>SwiftUIで複数行のPickerを作成する</title>
      <link>https://swiswiswift.com/2020-01-14/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-01-14/</guid>
      <description>UIPickerView のような複数行の Picker を作成する方法です。 UIPickerView と使い勝手がかなり異なり、戸惑いました。 参考: Multi-Component Picker (UIPickerView) in SwiftUI (adsbygoogle</description>
    </item>
    
    <item>
      <title>SwiftUIのPickerでLabelを表示しない</title>
      <link>https://swiswiswift.com/2020-01-13/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-01-13/</guid>
      <description>SwiftUIのPickerでLabelを表示しない方法です。 labelsHidden を設定することで可能です。 参考: How to</description>
    </item>
    
    <item>
      <title>SwiftUIでPicker を表示する</title>
      <link>https://swiswiswift.com/2020-01-12/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-01-12/</guid>
      <description>SwiftUI で Picker を表示するサンプルです。 複数行の場合はこちらです。 SwiftUIで複数行のPickerを作成す</description>
    </item>
    
    <item>
      <title>SwiftUI で画面遷移先の View から遷移元のメソッドを呼び出す</title>
      <link>https://swiswiswift.com/2020-01-11/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2020-01-11/</guid>
      <description>SwiftUI で画面遷移先の View から遷移元のメソッドを呼び出すサンプルです。 delegate を使ったのですが、Combine で書</description>
    </item>
    
    <item>
      <title>SwiftUI でアラートを表示する</title>
      <link>https://swiswiswift.com/2019-12-20/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-12-20/</guid>
      <description>SwiftUI でアラートを表示する方法です。 UIAlertController とはかなり書き方が異なります。 Property Wrapper の @State がまだ慣れません。 (adsbygoogle = window.adsbygoogle || []).push({});</description>
    </item>
    
    <item>
      <title>SwiftUIでリストのセルをタップするとアラートが表示される方法</title>
      <link>https://swiswiswift.com/2019-12-18/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-12-18/</guid>
      <description>SwiftUI でリストのセルをタップするとアラートが表示される方法です。 まだまだ SwiftUI に慣れません。 (adsbygoogle = window.adsbygoogle || []).push({}); amzn_assoc_ad_type =&#34;responsive_search_widget&#34;; amzn_assoc_tracking_id</description>
    </item>
    
    <item>
      <title>SwiftUIでリストを編集する</title>
      <link>https://swiswiswift.com/2019-12-17/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-12-17/</guid>
      <description>SwiftUIでリストを編集する方法です。 UITableView よりも短いコードで書くことができました。 参考: How to enable editing on</description>
    </item>
    
    <item>
      <title>TabViewを使って画面を切り替える（SwiftUI）</title>
      <link>https://swiswiswift.com/2019-11-21/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-21/</guid>
      <description>TabViewを使って画面を切り替えるサンプルです。 かなり簡単に書くことができますね。 TabView - SwiftUI | Apple Developer Documentation</description>
    </item>
    
    <item>
      <title>ListViewからそれぞれ別のViewに遷移する（SwiftUI）</title>
      <link>https://swiswiswift.com/2019-11-20/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://swiswiswift.com/2019-11-20/</guid>
      <description>設定画面のようにListViewからそれぞれ別のViewに遷移する方法が少し手間でした。 もっと良い方</description>
    </item>
    
  </channel>
</rss>